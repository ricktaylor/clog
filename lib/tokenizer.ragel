
#include <string.h>
#include <limits.h>
#include <float.h>
#include <math.h>

#include <lib/tokenizer.h>
#include <lib/parser.h>

#include <stdio.h>

%%{
	machine clog;
	alphtype unsigned char;
	
	action newline { ++parser->line; }
	
	# UTF-8 validation
	utf8_cont = 0x80..0xBF;
    utf8_one_byte = 0x00..0x7F;
    utf8_two_byte_basic      = (0xC0..0xDF) utf8_cont;
    utf8_two_byte_overlong   = (0xC0..0xC1) utf8_cont;
    utf8_two_byte            = utf8_two_byte_basic - utf8_two_byte_overlong;
    utf8_three_byte_basic    = (0xE0..0xEF) utf8_cont{2};
    utf8_three_byte_overlong = 0xE0 (0x80..0x9F) utf8_cont;
    utf8_three_byte_reserved = 0xED (0xA0..0xBF) utf8_cont;  # U+D800 to U+DFFF
    utf8_three_byte          = utf8_three_byte_basic - utf8_three_byte_overlong - utf8_three_byte_reserved;
    utf8_four_byte_basic     = (0xF0..0xF4) utf8_cont{3};
    utf8_four_byte_overlong  = 0xF0 (0x80..0x8F) utf8_cont{2};
    utf8_four_byte_reserved  = 0xF4 (0x90..0xBF) utf8_cont{2};    # > U+10FFFF
    utf8_four_byte           = utf8_four_byte_basic - utf8_four_byte_overlong - utf8_four_byte_reserved;
    utf8_char                = (utf8_one_byte | utf8_two_byte | utf8_three_byte | utf8_four_byte);
    
    # All characters with C0, C1 and continuation characters removed
    char = utf8_char - ((0x00..0x1F) | 0x7F | (0xC2 (0x80..0x9F)) | (0xEF 0xBF 0xBE) | (0xEF 0xBF 0xBF));
        
    LF = ('\n' | ("\r\n") | (0xC2 0x85)) @newline;
    tab = '\t';
    whitespace = tab | ' ' | LF;
    backslash  = 0x5C;
                
    comment       = '//' (char | tab)* LF;
    multi_comment =  '/*' ((char | tab | LF)* -- '*/') '*/';
    
    non_quote = char* -- (backslash '"' | '"');
    
    unescaped   = char - ('"' | backslash);
    escape      = '"' | backslash | 't' | 'r' | 'n' | ( 'u' xdigit{4} );
    string_char = unescaped | (backslash escape);
    string      = '"' string_char* '"';
    
    exponent = ('e' | 'E') ('+' | '-')? digit+;
        
    main := |*
    	whitespace;  
    	comment;
    	multi_comment;
    	
    	string => { if ((err = push_string(parser,ts+1,(te-ts)-2)) != 0) fbreak; };
    	
    	'0' | ([1-9] digit*)               => { if ((err = push_integer(parser,ts,te-ts,10)) != 0) fbreak; };
    	'0x' xdigit+                       => { if ((err = push_integer(parser,ts+2,(te-ts)-2,16)) != 0) fbreak; };
    	'0' [0-7]+                         => { if ((err = push_integer(parser,ts+1,(te-ts)-1,8)) != 0) fbreak; };
    	"'" ([0x20..0x7E] - backslash) "'" => { if ((err = push_int(parser,*(ts+1))) != 0) fbreak; }; # ASCII char codes
    	"'" backslash "''"                 => { if ((err = push_int(parser,'\'')) != 0) fbreak; };    # ASCII(')
    	
    	digit+ '.' digit+ exponent?  => { if ((err = push_float(parser,ts,te-ts)) != 0) fbreak; };
    	digit+ exponent?             => { if ((err = push_float(parser,ts,te-ts)) != 0) fbreak; };
    	    	
    	'{' => { push_token(parser,CLOG_TOKEN_OPEN_BRACE); };
    	'}' => { push_token(parser,CLOG_TOKEN_CLOSE_BRACE); };
    	'(' => { push_token(parser,CLOG_TOKEN_OPEN_PAREN); };
    	')' => { push_token(parser,CLOG_TOKEN_CLOSE_PAREN); };
    	';' => { push_token(parser,CLOG_TOKEN_SEMI_COLON); };
    	
    	'if'    => { push_token(parser,CLOG_TOKEN_IF); };
    	'else'  => { push_token(parser,CLOG_TOKEN_ELSE); };
    	'while' => { push_token(parser,CLOG_TOKEN_WHILE); };
    	'do'    => { push_token(parser,CLOG_TOKEN_DO); };
    	'for'   => { push_token(parser,CLOG_TOKEN_FOR); };
    	
    	'null';
    	'true';
    	'false';
    	
    	# This is last, so everything above matches first
    	[A-Za-z_] [A-Za_z0-9_]* => { if ((err = push_identifier(parser,ts,te-ts)) != 0) fbreak; };
    *|;
        
    dump := string_char;
	
}%%

%% write data;

static void push_token(struct clog_parser_t* parser, unsigned int type)
{
	clog_parser(parser->lemon_parser,type,NULL,parser);
}

static size_t utf8_encode( unsigned char bytes[4], unsigned int unicode_char )
{
    size_t len = 0;
    if (unicode_char <= 0x7F)
    {
        bytes[0] = (unsigned char)unicode_char;
        len = 1;
    }
    else if (unicode_char <= 0x7FF)
    {
        bytes[0] = (unsigned char)(0xC0 | ((unicode_char & 0x7C0) >> 6));
        bytes[1] = (unsigned char)(0x80 | (unicode_char & 0x3F));
        len = 2;
    }
    else if (unicode_char <= 0xFFFF)
    {
        bytes[0] = (unsigned char)(0xE0 | ((unicode_char & 0xF000) >> 12));
        bytes[1] = (unsigned char)(0x80 | ((unicode_char & 0xFC0) >> 6));
        bytes[2] = (unsigned char)(0x80 | (unicode_char & 0x3F));
        len = 3;
    }
    else if (unicode_char <= 0x10FFFF)
    {
        bytes[0] = (unsigned char)(0xF0 | ((unicode_char & 0x1C0000) >> 18));
        bytes[1] = (unsigned char)(0x80 | ((unicode_char & 0x3F000) >> 12));
        bytes[2] = (unsigned char)(0x80 | ((unicode_char & 0xFC0) >> 6));
        bytes[3] = (unsigned char)(0x80 | (unicode_char & 0x3F));
        len = 4;
    }
    
    return len;
}

static size_t append_unicode(unsigned char* dest, const unsigned char* src)
{
    unsigned char bytes[4] = {0};
    unsigned int unicode_char = 0;
    unsigned int len = 0;
         
    int i = 0;
    for (;i<4;++i)
    {
        unicode_char *= 16;
        
        if (src[i] >= 'a')
			unicode_char += src[i] - 'a' + 0xA;
		else if (src[i] >= 'A')
			unicode_char += src[i] - 'A' + 0xA;
		else
			unicode_char += src[i] - '0';
    }
    
    len = utf8_encode(bytes,unicode_char);
    if (len > 0)
        memcpy(dest,bytes,len);
            
    return len;
}

static int push_string(struct clog_parser_t* parser, const unsigned char* sz, size_t len)
{
	size_t i,j;
	struct clog_token_t* tok = NULL;
	unsigned char* str = clog_malloc(len+1);
	if (!str)
		return -1;
		
	for (i=0,j=0; i < len; ++i)
	{
		if (sz[i] != '\\')
			str[j++] = sz[i]; 
		else
		{
			switch (sz[++i])
			{
			case '\\':
				str[j++] = '\\';
				break;
				
			case 't':
				str[j++] = '\t';
				break;
				
			case 'n':
				str[j++] = '\n';
				break;
				
			case 'r':
				str[j++] = '\r';
				break;
				
			case '"':
				str[j++] = '"';
				break;
				
			case 'u':
				len = append_unicode(str+j,sz+i+1);
				if (!len)
				{
					clog_free(str);
					return -1;
				}
				j += len;
				i += 4;
				break;
								
			default:
				clog_free(str);
				return -1;
			}
		}
	}
	
	len = j;
	str[len] = 0;
	
	tok = clog_malloc(sizeof(*tok));
	if (!tok)
	{
		clog_free(str);
		return -1; 
	}
	
	tok->type = clog_token_string;
	tok->value.string.len = len;
	tok->value.string.str = str;
	
	clog_parser(parser->lemon_parser,CLOG_TOKEN_STRING,tok,parser);
	
	return 0;
}

static int push_identifier(struct clog_parser_t* parser, const unsigned char* sz, size_t len)
{
	struct clog_token_t* tok = NULL;
	unsigned char* str = clog_malloc(len+1);
	if (!str)
		return -1;
		
	memcpy(str,sz,len);
	str[len] = 0;
	
	tok = clog_malloc(sizeof(*tok));
	if (!tok)
	{
		clog_free(str);
		return -1; 
	}
	
	tok->type = clog_token_string;
	tok->value.string.len = len;
	tok->value.string.str = str;
	
	clog_parser(parser->lemon_parser,CLOG_TOKEN_IDENTIFIER,tok,parser);
	
	return 0;
}

static int push_int(struct clog_parser_t* parser, long v)
{
	struct clog_token_t* tok = clog_malloc(sizeof(*tok));
	if (!tok)
		return -1; 
		
	tok->type = clog_token_integer;
	tok->value.integer = v;
	
	clog_parser(parser->lemon_parser,CLOG_TOKEN_INTEGER,tok,parser);
	
	return 0;
}

static int push_integer(struct clog_parser_t* parser, const unsigned char* sz, size_t len, unsigned int base)
{
	long value = 0;
	size_t i;
	
	for (i=0;i<len;i++)
	{
		long c = 0;
		if (sz[i] >= 'a')
			c = sz[i] - 'a' + 0xA;
		else if (sz[i] >= 'A')
			c = sz[i] - 'A' + 0xA;
		else
			c = sz[i] - '0';
			
		if (value < LONG_MAX / base)
			value = value * base + c;
		else if (value == LONG_MAX / base)
		{
			value = value * base;
			if (value > LONG_MAX - c)
				return -1;
		}
		else
			return -1;
	}
	
	return push_int(parser,value);
}

static double fast_pow10(int exp)
{
	static const double tab[] =
	{
		1.0e0, 1.0e1, 1.0e2, 1.0e3, 1.0e4, 1.0e5, 1.0e6, 1.0e7, 1.0e8, 1.0e9,
		1.0e10,1.0e11,1.0e12,1.0e13,1.0e14,1.0e15,1.0e16,1.0e17,1.0e18,1.0e19,
		1.0e20,1.0e21,1.0e22,1.0e23,1.0e24,1.0e25,1.0e26,1.0e27,1.0e28,1.0e29,
		1.0e30,1.0e31,1.0e32,1.0e33,1.0e34,1.0e35,1.0e36,1.0e37,1.0e38,1.0e39,
		1.0e40,1.0e41,1.0e42,1.0e43,1.0e44,1.0e45,1.0e46,1.0e47,1.0e48,1.0e49,
		1.0e50,1.0e51,1.0e52,1.0e53,1.0e54,1.0e55,1.0e56,1.0e57,1.0e58,1.0e59,
		1.0e60,1.0e61,1.0e62,1.0e63,1.0e64,1.0e65,1.0e66,1.0e67,1.0e68,1.0e69,
	};

	int m;
	
	if (exp < 0) 
	{
		exp = -exp;
		if (exp < (int)(sizeof(tab)/sizeof(tab[0])))
			return 1/tab[exp];
			
		m = exp/2;
		
		return fast_pow10(-m) * fast_pow10(m-exp);
	}
	
	if (exp < (int)(sizeof(tab)/sizeof(tab[0])))
		return tab[exp];
		
	m = exp/2;
	
	return fast_pow10(m) * fast_pow10(exp-m);
}

static int push_float(struct clog_parser_t* parser, const unsigned char* sz, size_t len)
{
	struct clog_token_t* tok;
	double d = 0.0;
	size_t i = 0;
	int exp = 0;
	
	for (i=0;i<len && sz[i] != '.';++i)
		d = d * 10.0 + (sz[i] - '0');
		
	if (i<len && sz[i] == '.')
	{
		++i;
		for (i=0;i<len && sz[i] >= '0' && sz[i] <= '9';++i)
		{
			d = d * 10.0 + (sz[i] - '0');
			--exp;
		}
	}
	
	if (i<len && (sz[i] == 'e' || sz[i] == 'E'))
	{
		int neg = 0;
		unsigned int e = 0;
		
		++i;
		if (i<len && (sz[i] == '-' || sz[i] == '+'))
		{
			++i;
			if (sz[i] == '-')
				neg = 1;
		}
		
		for (;i<len;++i)
			e = e * 10 + (sz[i] - '0');
			
		if (neg)
			exp -= e;
		else
			exp += e;
	}
	
	if (exp < DBL_MIN_10_EXP || exp > DBL_MAX_10_EXP)
		return -1;
		
	if (exp)
		d *= fast_pow10(exp);
	
	if (d == HUGE_VAL)
		return -1;
	
	tok = clog_malloc(sizeof(*tok));
	if (!tok)
		return -1; 
		
	tok->type = clog_token_real;
	tok->value.real = d;
	
	clog_parser(parser->lemon_parser,CLOG_TOKEN_INTEGER,tok,parser);
	
	return 0;
}

int clog_tokenize(int (*rd_fn)(void* p, unsigned char* buf, size_t* len), void* rd_param, struct clog_parser_t* parser)
{
	unsigned int cs;
	unsigned int act;
	const unsigned char* eof = NULL;
	unsigned char* buffer;
	unsigned char* p;
	unsigned char* ts;
	unsigned char* te;
	size_t buffer_size = 1024;
	int err = 0;
	
	%% write init;
		
	buffer = clog_malloc(buffer_size);
	if (!buffer)
		return -1;
		
	for (p = buffer;!err && !eof && !parser->failed;)
	{
		const unsigned char* pe;
		ptrdiff_t space = buffer_size - (p - buffer);
		size_t read = space;
		
		if ((err = (*rd_fn)(rd_param,p,&read)) != 0)
			break;
		
		pe = p + read;
		if (read < space)
			eof = pe;
		
		while (p != pe && !err && !parser->failed)
		{
			%% write exec;
			
			if (cs >= %%{ write first_final; }%% || cs == %%{ write error; }%%)
				break;
		}
		
		p = buffer;
		if (ts)
		{
			space = pe - ts;
			if (space == buffer_size)
			{
				unsigned char* new_buffer = clog_realloc(buffer,buffer_size * 2);
				if (!new_buffer)
				{
					err = -1;
					break;
				}
					
				buffer_size *= 2;
				ts = new_buffer + (ts - buffer);
				p = new_buffer;				
				buffer = new_buffer;
			}
			
			memmove(p,ts,space);
			ts = p;
			p += space;
		}
	}
	
	clog_free(buffer);
	
	if (!err && !parser->failed && cs < %%{ write first_final; }%%)
	{
		printf("*** Error ***\n");
		err = -1;
	}
		
	return err;
}
